name: Deploy - 07 Frontend (Pre-built)

on:
  workflow_dispatch:

jobs:
  frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: frontend/yarn.lock

      - name: Install frontend dependencies
        working-directory: frontend
        run: yarn install --immutable

      - name: Build frontend
        working-directory: frontend
        run: yarn build

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_HOST_KEY: ${{ secrets.VPS_HOST_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          port=${VPS_SSH_PORT:-22}
          if [ -n "${VPS_HOST_KEY:-}" ]; then
            echo "$VPS_HOST_KEY" >> ~/.ssh/known_hosts
          else
            ssh-keyscan -p "$port" -H "$VPS_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          fi
          chmod 644 ~/.ssh/known_hosts

      - name: Deploy frontend files
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_SUDO_PASSWORD: ${{ secrets.VPS_SUDO_PASSWORD }}
        run: |
          set -euo pipefail
          port=${VPS_SSH_PORT:-22}
          
          # Create web directory
          if [ -n "${VPS_SUDO_PASSWORD:-}" ]; then
            pw_b64=$(printf '%s' "$VPS_SUDO_PASSWORD" | base64)
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" "PW=\$(echo \"$pw_b64\" | base64 -d); echo \"\$PW\" | sudo -S -p '' mkdir -p /home/\$USER/www/dicty; echo \"\$PW\" | sudo -S -p '' chown -R \$USER:\$USER /home/\$USER/www"
          else
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'sudo mkdir -p /home/$USER/www/dicty && sudo chown -R $USER:$USER /home/$USER/www'
          fi
          
          # Upload built frontend files
          rsync -avz --delete -e "ssh -p $port -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes" frontend/build/ "${VPS_USER}@${VPS_HOST}:/home/${VPS_USER}/www/dicty/"
          
          echo "Frontend deployed successfully!"
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'ls -la /home/$USER/www/dicty/ | head -10'

      - name: Upload and install Caddy configs
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_SUDO_PASSWORD: ${{ secrets.VPS_SUDO_PASSWORD }}
        run: |
          set -euo pipefail
          port=${VPS_SSH_PORT:-22}
          
          # Create directories and upload configs
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'mkdir -p /home/$USER/dicty_resolwe_server/deploy/caddy /home/$USER/logs'
          scp -P "$port" -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes deploy/caddy/Caddyfile "${VPS_USER}@${VPS_HOST}:/home/${VPS_USER}/dicty_resolwe_server/deploy/caddy/Caddyfile"
          scp -P "$port" -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=yes deploy/systemd/caddy.service "${VPS_USER}@${VPS_HOST}:/home/${VPS_USER}/dicty_resolwe_server/deploy/systemd/caddy.service"

      - name: Install and start Caddy service
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_SUDO_PASSWORD: ${{ secrets.VPS_SUDO_PASSWORD }}
        run: |
          set -euo pipefail
          port=${VPS_SSH_PORT:-22}
          if [ -n "${VPS_SUDO_PASSWORD:-}" ]; then
            pw_b64=$(printf '%s' "$VPS_SUDO_PASSWORD" | base64)
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" "PW=\$(echo \"$pw_b64\" | base64 -d); echo \"\$PW\" | sudo -S -p '' systemctl stop caddy || true; echo \"\$PW\" | sudo -S -p '' cp /home/\$USER/dicty_resolwe_server/deploy/systemd/caddy.service /etc/systemd/system/; echo \"\$PW\" | sudo -S -p '' systemctl daemon-reload; echo \"\$PW\" | sudo -S -p '' systemctl enable caddy; echo \"\$PW\" | sudo -S -p '' systemctl start caddy"
          else
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'sudo systemctl stop caddy || true && sudo cp /home/$USER/dicty_resolwe_server/deploy/systemd/caddy.service /etc/systemd/system/ && sudo systemctl daemon-reload && sudo systemctl enable caddy && sudo systemctl start caddy'
          fi

      - name: Test deployment
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
          VPS_SUDO_PASSWORD: ${{ secrets.VPS_SUDO_PASSWORD }}
        run: |
          set -euo pipefail
          port=${VPS_SSH_PORT:-22}
          
          echo "Waiting for Caddy to start..."
          sleep 10
          
          if [ -n "${VPS_SUDO_PASSWORD:-}" ]; then
            pw_b64=$(printf '%s' "$VPS_SUDO_PASSWORD" | base64)
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" "PW=\$(echo \"$pw_b64\" | base64 -d); echo \"\$PW\" | sudo -S -p '' systemctl status caddy --no-pager -l"
          else
            ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'sudo systemctl status caddy --no-pager -l'
          fi
          
          echo "Testing frontend (HTTP)..."
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'curl -s http://127.0.0.1/ | head -10 || echo "HTTP not responding"'
          
          echo "Testing frontend (public IP)..."
          ssh -o BatchMode=yes -o StrictHostKeyChecking=yes -p "$port" -i ~/.ssh/id_ed25519 "${VPS_USER}@${VPS_HOST}" 'curl -s -H "Host: 95.179.242.134" http://127.0.0.1/ | head -10 || echo "Public access test failed"'
          
          echo "ðŸŽ‰ Deployment complete! Site should be available at:"
          echo "   http://95.179.242.134"
          echo "   https://95.179.242.134 (HTTPS may take a few minutes to provision)"
